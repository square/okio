apply plugin: 'org.jetbrains.kotlin.multiplatform'

kotlin {
  jvm {
    withJava()
  }
  if (kmpJsEnabled) {
    js {
      configure([compilations.main, compilations.test]) {
        tasks.getByName(compileKotlinTaskName).kotlinOptions {
          moduleKind = "umd"
          sourceMap = true
          metaInfo = true
        }
      }
      nodejs {
        testTask {
          useMocha {
            timeout = "30s"
          }
        }
      }
    }
  }
  if (kmpNativeEnabled) {
    iosX64()
    iosArm64()
    watchosArm32()
    watchosArm64()
    watchosX86()
    // Required to generate tests tasks: https://youtrack.jetbrains.com/issue/KT-26547
    linuxX64()
    macosX64()
    mingwX64()
  }
  sourceSets {
    commonMain {
      dependencies {
        api deps.kotlin.stdLib.common
      }
    }
    commonTest {
      dependencies {
        implementation deps.kotlin.test.common
        implementation deps.kotlin.test.annotations
      }
    }
    nonJvmMain {
      kotlin.srcDirs += 'src/hashFunctions/kotlin'
    }
    jvmMain {
      dependencies {
        api deps.kotlin.stdLib.jdk6
        compileOnly deps.animalSniffer.annotations
      }
    }
    jvmTest {
      kotlin.srcDirs += 'src/hashFunctions/kotlin'
      dependencies {
        implementation deps.test.junit
        implementation deps.test.assertj
        implementation deps.kotlin.test.jdk
      }
    }
    jsMain {
      dependsOn nonJvmMain
      dependencies {
        api deps.kotlin.stdLib.js
      }
    }
    jsTest {
      dependencies {
        implementation deps.kotlin.test.js
      }
    }
    nativeMain {
      dependsOn nonJvmMain
    }
    nativeTest {
      dependsOn commonTest
    }
    appleMain {
      dependsOn nonJvmMain
    }
    appleTest {
      dependsOn commonTest
    }

    configure([iosX64Main, iosArm64Main, watchosArm32Main, watchosArm64Main, watchosX86Main, linuxX64Main, macosX64Main,
               mingwX64Main]) {
      dependsOn nativeMain
    }
    configure([iosX64Test, iosArm64Test, watchosArm32Test, watchosArm64Test, watchosX86Test, linuxX64Test, macosX64Test,
               mingwX64Test]) {
      dependsOn nativeTest
    }
    configure([iosX64Main, iosArm64Main, macosX64Main, watchosArm32Main, watchosArm64Main, watchosX86Main]) {
      dependsOn appleMain
    }
    configure([iosX64Test, iosArm64Test, watchosArm32Test, watchosArm64Test, watchosX86Test, macosX64Test]) {
      dependsOn appleTest
    }
  }
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

apply from: 'jvm/jvm.gradle'
apply from: "$rootDir/gradle/gradle-mvn-mpp-push.gradle"
